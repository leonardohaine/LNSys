/*
 * Registro.java
 *
 * Created on 20 de Dezembro de 2008, 19:20
 */

package Tela;


import java.awt.Color;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.text.Format;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
//import util.ParsingXML;

/**
 *
 * @author  Administrador
 */
public class Registro extends javax.swing.JDialog {

       static String REG_PATH = "reg query " + "\"HKLM\\SYSTEM\\SETUP\\Pid\\";
       public static String unidade = System.getProperty("user.home").substring( 0 ,2 );
       public static String DATABASE = null;
       public static String IP = null;
       public static String USUARIO = null;
       public static String SENHA = null;
       public static String ini = "/windows/LNSys.ini";

    /** Creates new form Registro */
    public Registro(java.awt.Frame parent, boolean modal) throws Exception {
        super(parent, modal);
        initComponents();
        
        ImageIcon icone = new ImageIcon(this.getClass().getClassLoader().getResource("imagens/IconeLN.png"));
        setIconImage(icone.getImage());
        
        this.setLocationRelativeTo(null);
        //jLabelRetornoCodigo.setText(getFirstKey());
        //keyGeneration();
        InetAddress localHost = InetAddress.getLocalHost();
        NetworkInterface netInter = NetworkInterface.getByInetAddress( localHost );
        byte[] macAddressBytes = netInter.getHardwareAddress();

        String macAddress =  String.format("%1$02x-%2$02x-%3$02x-%4$02x-%5$02x-%6$02x",
        macAddressBytes[0], macAddressBytes[1],
        macAddressBytes[2], macAddressBytes[3],
        macAddressBytes[4], macAddressBytes[5] ).toUpperCase();
        System.out.println("MAC: " + macAddress);

        jTextFieldDatabase.setVisible(true);
        jLabel1.setVisible(true);
        this.getFirstKey();
    }

    Registro() {
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    public static String keyGeneration() throws Exception{
        int quantCaracteres = 0;
        String part1 = "";
        String part2 = "";
        int intPart1=0;
        int intPart2=0;
        Format formatter;
        String newString="";
        String finalString="";
        String value="";
        
        value=getFirstKey();
        
        //System.out.println("value "+value);
        //Date dataWeb = ParsingXML.getData();
        Date data = new Date();
        
        formatter = new SimpleDateFormat("yyyy");
        String dataFormatada = formatter.format(data);        
        
        newString = value + dataFormatada;
        
        //System.out.println("new "+newString); 
        
        quantCaracteres = newString.length();
        intPart1 = Math.round(quantCaracteres/2);
        intPart2 = quantCaracteres - Math.round(quantCaracteres/2);
        
        part1 = newString.substring(0,intPart1);
        part2 = newString.substring(intPart1,intPart1+intPart2);
        
        intPart1= (Integer.valueOf(part1)/3)*4+7;
        intPart2= (Integer.valueOf(part2)/3)*2-5;
        finalString=String.valueOf(intPart1 + intPart2);
        
        System.out.println("FINAL STRING "+finalString);
        
        return finalString;
    }
    
    public static String getFirstKey(){
        boolean exit=false;
        String finalLine="";
        //TO DO
        try {
            Process process = Runtime.getRuntime().exec(REG_PATH);
            InputStream inputstream = process.getInputStream();
            InputStreamReader inputstreamreader = new InputStreamReader(inputstream);
            BufferedReader bufferedreader = new BufferedReader(inputstreamreader , 2048);
            String line;
            while (exit==false) {
                line = bufferedreader.readLine();
                System.out.println("LINE "+line);
                if (line == null){
                    exit = true;
                }else{
                    finalLine=line;
                }
            }
            finalLine = finalLine.substring(finalLine.length()-8, finalLine.length());
            finalLine.trim();
        }
        catch (Exception e) {
            System.out.println("I am in Exception");
            e.printStackTrace();
        }        
        //System.out.println("final line "+finalLine);        
        return finalLine;
    }
    
//    public static void EscreveKey(String texto, String ip) throws IOException, Exception{
//        new File(unidade+"/windows/keyMoto.ini").setWritable(true);
//        FileWriter leitor = new FileWriter(unidade+"/windows/keyMoto.ini");
//            BufferedWriter out =new BufferedWriter(leitor, 2048);
//            BASE64Encoder encoder = new BASE64Encoder();
//                System.out.println("newREG "+new String(encoder.encode(texto.getBytes())));
//
//                //out.newLine();
//
//                out.write(ip);
//                out.newLine();
//                //out.write(new String(encoder.encode(texto.getBytes())));
//                //out.newLine();
//                out.write("*****N√ÉO ALTERE ESSE DOCUMENTO*****");
//                out.flush();
//                out.close();
//
//    }


    public static void EscreveKey(String database, String ip, String usuario, String senha) throws IOException, Exception{
        new File(unidade+"/windows/LNSys.ini").setWritable(true);
        FileWriter leitor = new FileWriter(unidade+ini);
            //BufferedWriter out =new BufferedWriter(leitor, 1024);
            BufferedWriter out =new BufferedWriter(leitor);
            BASE64Encoder encoder = new BASE64Encoder();
                //System.out.println("newREG "+new String(encoder.encode(texto.getBytes())));
                out.write("[LNSys]");
                out.newLine();
                out.write("DATABASE="+database);
                out.newLine();
                out.write("IP="+ip);
                out.newLine();
                out.write("USUARIO="+new String(encoder.encode(usuario.getBytes())));
                out.newLine();
                out.write("SENHA="+encoder.encode(senha.getBytes()));
                out.newLine();
                out.write("LOGIN=N");
                
               // out.write(new String(encoder.encode(texto.getBytes())));
                out.newLine();
                out.flush();
                out.close();

    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldDatabase = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabelRetornoCodigo = new javax.swing.JLabel();
        jLabelReturnaErro = new javax.swing.JLabel();
        jButtonSair = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldIp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldUsuario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPasswordFieldSenha = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("REGISTRO");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "BANCO DE DADOS", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Comic Sans MS", 1, 12), new java.awt.Color(153, 153, 153))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabel1.setText("DATABASE:");

        jTextFieldDatabase.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDatabaseFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldDatabaseFocusLost(evt);
            }
        });
        jTextFieldDatabase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDatabaseKeyPressed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jButton1.setText("GRAVAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabelRetornoCodigo.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabelRetornoCodigo.setForeground(new java.awt.Color(255, 0, 0));

        jLabelReturnaErro.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabelReturnaErro.setForeground(new java.awt.Color(255, 0, 0));
        jLabelReturnaErro.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButtonSair.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jButtonSair.setText("FECHAR");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabel2.setText("IP SERVIDOR:");

        jTextFieldIp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldIpFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldIpFocusLost(evt);
            }
        });
        jTextFieldIp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldIpKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabel3.setText("USU√ÅRIO:");

        jTextFieldUsuario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldUsuarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldUsuarioFocusLost(evt);
            }
        });
        jTextFieldUsuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldUsuarioKeyPressed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 12));
        jLabel4.setText("SENHA:");

        jPasswordFieldSenha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPasswordFieldSenhaKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldDatabase, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldIp, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabelRetornoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(43, 43, 43))
                                    .addComponent(jLabelReturnaErro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPasswordFieldSenha, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSair)
                        .addGap(42, 42, 42))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextFieldDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jPasswordFieldSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelRetornoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelReturnaErro, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSair)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

            try {
            jLabelReturnaErro.setText("");
            String database = jTextFieldDatabase.getText().trim();
            String ip = jTextFieldIp.getText().trim();
            String usuario = jTextFieldUsuario.getText().trim();
            String senha = jPasswordFieldSenha.getText().trim();
            BASE64Decoder decoder = new BASE64Decoder();
            DATABASE = database;
            IP = ip;
            USUARIO = new String(decoder.decodeBuffer(usuario));
            SENHA = new String(decoder.decodeBuffer(senha));
                //if (keyGeneration().equals(getCodigo)) {
                    try {
                boolean verificaNumero = new Inicial().isNumeric(database);
                //if(verificaNumero){
                    } catch (Exception ex) {
                Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
            }
            //if(verificaNumero){
            
            //if(verificaNumero){
            //if(verificaNumero){
            if (ip.equals("") || ip == null || database.equals("") || usuario.equals("") || senha.equals("")) {
                JOptionPane.showMessageDialog(this, "Todos os campos s√£o obrigat√≥rio", "Aten√ß√£o", JOptionPane.WARNING_MESSAGE);
                return;
            }
            try {
                //if (keyGeneration().equals(getCodigo)) {
                try {
                    EscreveKey(database, ip, usuario, senha);
                    //JOptionPane.showMessageDialog(this, "C√≥digo Correto, Obrigado!", "Aten√ß√£o", JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } catch (IOException ex) {
                    Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
                }
//                } else {
//                    jLabelReturnaErro.setText("C√≥digo incorreto, tente novamente!!!");
//                }
            } catch (Exception ex) {
                Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
            }
            //}else{
            //jLabelReturnaErro.setText("Digite o c√≥digo do registro");
            //}
//                } else {
//                    jLabelReturnaErro.setText("C√≥digo incorreto, tente novamente!!!");
//                }
            } catch (IOException ex) {
                Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
            }

         //}else{
            //jLabelReturnaErro.setText("Digite o c√≥digo do registro");
         //}
    
    
}//GEN-LAST:event_jButton1ActionPerformed

private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
    System.exit(0);
}//GEN-LAST:event_jButtonSairActionPerformed

private void jTextFieldDatabaseFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDatabaseFocusGained
    jTextFieldDatabase.setBackground(Color.GRAY);
        jTextFieldDatabase.setForeground(Color.white);
}//GEN-LAST:event_jTextFieldDatabaseFocusGained

private void jTextFieldDatabaseFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDatabaseFocusLost
    jTextFieldDatabase.setBackground(Color.WHITE);
        jTextFieldDatabase.setForeground(Color.BLACK);
}//GEN-LAST:event_jTextFieldDatabaseFocusLost

private void jTextFieldIpFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldIpFocusGained
    jTextFieldIp.setBackground(Color.GRAY);
        jTextFieldIp.setForeground(Color.white);
}//GEN-LAST:event_jTextFieldIpFocusGained

private void jTextFieldIpFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldIpFocusLost
    jTextFieldIp.setBackground(Color.WHITE);
        jTextFieldIp.setForeground(Color.BLACK);
}//GEN-LAST:event_jTextFieldIpFocusLost

private void jTextFieldUsuarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUsuarioFocusGained
    jTextFieldUsuario.setBackground(Color.GRAY);
        jTextFieldUsuario.setForeground(Color.white);
}//GEN-LAST:event_jTextFieldUsuarioFocusGained

private void jTextFieldUsuarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldUsuarioFocusLost
    jTextFieldUsuario.setBackground(Color.WHITE);
        jTextFieldUsuario.setForeground(Color.BLACK);
}//GEN-LAST:event_jTextFieldUsuarioFocusLost

private void jTextFieldDatabaseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDatabaseKeyPressed
if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldIp.requestFocus();
        }
}//GEN-LAST:event_jTextFieldDatabaseKeyPressed

private void jTextFieldIpKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldIpKeyPressed
    if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jTextFieldUsuario.requestFocus();
        }
}//GEN-LAST:event_jTextFieldIpKeyPressed

private void jTextFieldUsuarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldUsuarioKeyPressed
    if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jPasswordFieldSenha.requestFocus();
        }
}//GEN-LAST:event_jTextFieldUsuarioKeyPressed

private void jPasswordFieldSenhaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordFieldSenhaKeyPressed
    if(evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER){
            jLabelReturnaErro.setText("");
    String database =jTextFieldDatabase.getText().trim();
    String ip = jTextFieldIp.getText().trim();
    String usuario = jTextFieldUsuario.getText().trim();
    String senha = jPasswordFieldSenha.getText().trim();
    DATABASE = database;
    IP = ip;
    USUARIO = usuario;
    SENHA = senha;

            try {
                boolean verificaNumero = new Inicial().isNumeric(database);
                //if(verificaNumero){
             
            } catch (Exception ex) {
                Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
            }
            //if(verificaNumero){

         //if(verificaNumero){

            if(ip.equals("") || ip == null || database.equals("") || usuario.equals("") || senha.equals("") ){
                JOptionPane.showMessageDialog(this, "Todos os campos s√£o obrigat√≥rio", "Aten√ß√£o", JOptionPane.WARNING_MESSAGE);
                return;
            }

            try {
                //if (keyGeneration().equals(getCodigo)) {
                    try {
                        EscreveKey(database, ip, usuario, senha);
                        //JOptionPane.showMessageDialog(this, "C√≥digo Correto, Obrigado!", "Aten√ß√£o", JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                    } catch (IOException ex) {
                        Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                        Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
                    }
//                } else {
//                    jLabelReturnaErro.setText("C√≥digo incorreto, tente novamente!!!");
//                }
            } catch (Exception ex) {
                Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
}//GEN-LAST:event_jPasswordFieldSenhaKeyPressed




/**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Registro dialog;
                try {
                    dialog = new Registro(new javax.swing.JFrame(), true);
                
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Registro.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelRetornoCodigo;
    private javax.swing.JLabel jLabelReturnaErro;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordFieldSenha;
    private javax.swing.JTextField jTextFieldDatabase;
    private javax.swing.JTextField jTextFieldIp;
    private javax.swing.JTextField jTextFieldUsuario;
    // End of variables declaration//GEN-END:variables

}
